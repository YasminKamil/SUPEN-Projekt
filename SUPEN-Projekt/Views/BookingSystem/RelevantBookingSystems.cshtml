@model SUPEN_Projekt.Logic.ViewModels.BookingsWithDistanceViewModel
@using System.Globalization;

@foreach (var item in Model.BookingsWithDistance)
{

    foreach (var i in item.BookingSystem.Services)
    {

        foreach (var booking in i.Bookings.Where(x => x.Available == true))
        {
            <a href='@Url.Action("BookService","Booking",new {  inBookingSystemId = item.BookingSystem.BookingSystemId, inServiceId = i.ServiceId, inBookingId = booking.BookingId, inStartTime = booking.StartTime.ToString()})' class='link-icon btn btn-default' style="width:100%; border-radius: 5px; direction:ltr; margin-bottom: 1%; border-color:ThreeDShadow">

                <h4 style="font-weight: bold; text-align:center; margin-bottom:2px;">
                    @i.ServiceName

                    @if (item.Distance < 1000)
                    {
                        <p class="list-group-item-text" style="right:2%">  @item.Distance meter</p>
                    }
                    else
                    {
                        double distance = item.Distance / 1000;
                        <p class="list-group-item-text" style="right:2%"> @Math.Round(distance, 2) km</p>
                    }


                </h4>
                @Html.DisplayFor(modelItem => item.BookingSystem.CompanyName) <hr style="margin-bottom:2px; margin-top:2px" />
                <p class="list-group-item-text" style="margin-top:5px;"></p>
                <b>
                    <span class="glyphicon">&#xe023;</span> @booking.StartTime.ToString("HH:mm") - @booking.EndTime.ToString("HH:mm")
                    <br />
                    @i.Duration Minuter
                </b>
            </a>

        }
    }
}



@*<script src="~/Scripts/leafletjs.js"></script>*@

@{
    var culture = new CultureInfo("en-US");
    var latitude = ((decimal)Model.SelectedBookingSystem.Latitude).ToString("G", culture);
    var longitude = ((decimal)Model.SelectedBookingSystem.Longitude).ToString("G", culture);
    var companyName = Model.SelectedBookingSystem.CompanyName;

}

<script>

    var map = L.map('mapid', {
        zoomControl: false
    }).setView([parseFloat(@latitude), parseFloat(@longitude)], 14);


    L.control.zoom({
        position: 'bottomright'    
    }).addTo(map);

                    L.tileLayer('https://{s}.tile.openstreetmap.se/hydda/full/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 18,
            subdomains: ['a', 'b', 'c']
                }).addTo(map);

    L.marker([parseFloat(@latitude), parseFloat(@longitude)]).addTo(map);

        var popup = L.popup()
            .setLatLng([parseFloat(@latitude), parseFloat(@longitude)])
            .setContent("@companyName")
            .openOn(map);

        var markers = [{ "lat":@latitude , "long":@longitude}];


            @foreach (var item in @Model.BookingsWithDistance)
            {
                <text>
                        var lati = @item.Latitude.ToString("G", culture);
                        var longi = @item.Longitude.ToString("G", culture);

                        markers.push({ "lat": parseFloat(lati), "long": parseFloat(longi) });

               </text>

             }
        for (var j = 0; j < markers.length; j++) {

            L.marker([parseFloat(markers[j].lat), parseFloat(markers[j].long)]).addTo(map);

            }


</script>

