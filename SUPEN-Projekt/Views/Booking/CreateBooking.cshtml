@model SUPEN_Projekt.Logic.BookingSystemServiceBookingViewModel

@{
	ViewBag.Title = "CreateBooking";
}

@using (Html.BeginForm()) {

	@Html.AntiForgeryToken()

	<p>You are now going to book @Model.service.ServiceName</p>
	<div class="form-horizontal">
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		@Html.HiddenFor(model => model.Id)
		@Html.HiddenFor(model => Model.booking.BookingId)
		@Html.HiddenFor(model => Model.booking.Available)
		@Html.HiddenFor(model => Model.booking.StartTime)
		@Html.HiddenFor(model => Model.booking.EndTime)
		@Html.HiddenFor(model => Model.booking.Date)
		@*@Html.HiddenFor(model => Model.booking.Price)
			@Html.HiddenFor(model => Model.bookingSystem)
			@Html.HiddenFor(model => Model.service)*@

		@Html.HiddenFor(model => Model.bookingSystem)
		@Html.HiddenFor(model => Model.service)


		<div class="form-group">
			@Html.LabelFor(model => model.booking.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.booking.UserName, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => Model.booking.UserName, "", new { @class = "text-danger" })
			</div>
		</div>


		@*<table class=" col-md-10">*@
			@{
				int open = 8;
				decimal inHours = Convert.ToDecimal(Model.service.Duration) / Convert.ToDecimal(60);
				int iterations = (int)Math.Floor(Convert.ToDecimal(open) / Convert.ToDecimal(inHours));
				DateTime startTime = DateTime.Today;
				startTime = startTime.AddHours(8);

				List<DateTime> dt = new List<DateTime>();

				for (int i = 0; i < iterations; i++) {
					DateTime endTime = startTime;
					endTime = endTime.AddMinutes(Model.service.Duration);
					@*@:<tr>
						@:<th rowspan="2" colspan="4" class="container">*@


					if (Model.service.Bookings.Any(x => x.StartTime == startTime && x.Available == false)) {
							 
							<div class="form-group">
							  	<div class="col-md-offset-2 col-md-10">
							  		<input type="submit" value="@startTime.ToString("HH:mm") - @endTime.ToString("HH:mm")" class="input btn-danger" />
								</div>
								</div>
					}
					else {
							  <div class="form-group">
							  	<div class="col-md-offset-2 col-md-10">
							  		<input type="submit" value="@startTime.ToString("HH:mm") - @endTime.ToString("HH:mm")" class="input btn-info" />
							  	</div>
								  </div>
					 }
							  	@*@:</th>
					@:</tr>*@

					startTime = endTime;
				}
			}
		@*</table>*@
	</div>
				}

	@*<h2>CreateBooking</h2>


		@using (Html.BeginForm())
		{
			@Html.AntiForgeryToken()

			<div class="form-horizontal">
				<h4>ViewModel4</h4>
				<hr />
				@Html.ValidationSummary(true, "", new { @class = "text-danger" })
				<div class="form-group">
					<div class="col-md-offset-2 col-md-10">
						<input type="submit" value="Create" class="btn btn-default" />
					</div>
				</div>
			</div>
		}

		<div>
			@Html.ActionLink("Back to List", "Index")
		</div>

		@section Scripts {
			@Scripts.Render("~/bundles/jqueryval")
		}*@
